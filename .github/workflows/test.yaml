name: Test Chezmoi Setup

on: [push, pull_request]

jobs:
  test-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl git zsh stow jq ranger python3 python3-pip ca-certificates gnupg lsb-release
          # Install newer Node.js (optional)
          curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
          sudo apt-get install -y nodejs

      - name: Install chezmoi
        run: |
          sh -c "$(curl -fsLS get.chezmoi.io)" -- -b "$HOME/.local/bin"

      - name: Add chezmoi to PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Validate setup
        run: |
          echo "✅ Checking chezmoi installation..."
          command -v chezmoi || { echo "❌ chezmoi not found"; exit 1; }
          chezmoi --version

          echo "✅ Checking required files..."
          [[ -f "scripts/migrate-to-chezmoi.sh" ]] || exit 1
          [[ -f "scripts/run_once_install-dotfiles.sh.tmpl" ]] || exit 1
          [[ -d "chezmoi-source" ]] || exit 1
          [[ -f "chezmoi.toml" ]] || exit 1

      - name: Test migration script
        run: |
          bash -n scripts/migrate-to-chezmoi.sh
          bash scripts/migrate-to-chezmoi.sh

      - name: Test chezmoi apply
        run: |
          chezmoi apply --dry-run

      - name: Verify configuration
        run: |
          chezmoi verify

  test-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Add Homebrew to PATH
        run: echo "/opt/homebrew/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          # Check and install packages only if not already installed
          for pkg in stow jq ranger python node; do
            if ! brew list "$pkg" >/dev/null 2>&1; then
              brew install "$pkg"
            else
              echo "✅ $pkg already installed"
            fi
          done

      - name: Install chezmoi
        run: |
          brew install chezmoi

      - name: Validate setup
        run: |
          echo "✅ Checking chezmoi installation..."
          chezmoi --version
          echo "✅ Checking required files..."
          [[ -f "scripts/migrate-to-chezmoi.sh" ]] || exit 1
          [[ -f "scripts/run_once_install-dotfiles.sh.tmpl" ]] || exit 1
          [[ -d "chezmoi-source" ]] || exit 1
          [[ -f "chezmoi.toml" ]] || exit 1

      - name: Test migration script on macOS
        run: |
          bash -n scripts/migrate-to-chezmoi.sh
          bash scripts/migrate-to-chezmoi.sh

      - name: Test chezmoi apply on macOS
        run: |
          chezmoi apply --dry-run

      - name: Verify configuration on macOS
        run: |
          chezmoi verify

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check shell script syntax
        run: |
          bash -n scripts/migrate-to-chezmoi.sh
          bash -n scripts/run_once_install-dotfiles.sh.tmpl

      - name: Check for template syntax
        run: |
          template_files=$(find chezmoi-source -name "*.tmpl")
          for file in $template_files; do
            echo "Checking $file..."
            if grep -q "{{.*}}" "$file"; then
              echo "✅ $file contains templates"
            else
              echo "⚠️  $file has no templates"
            fi
          done

      - name: Check for security issues
        run: |
          echo "Checking for potential security issues..."
          if grep -r -i "password\|secret\|token\|api_key\|credential\|auth\|private_key\|ssh_key" . --exclude-dir=.git | \
             grep -v -E "(keybindings|keys|keymap|bindkey|bind-key|alt_key|dvorak|keyboard|keyboard|key|Key|KEY)" | \
             grep -v -E "(detect-secrets|secrets)" | \
             grep -v -E "(fugitive|telescope|lsp|remap|config)"; then
            echo "⚠️  Potential sensitive data found"
            exit 1
          else
            echo "✅ No obvious sensitive data found"
          fi
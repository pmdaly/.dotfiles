#!/bin/bash
# Install dotfiles and dependencies
# This script runs once during chezmoi apply

set -euo pipefail

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Error handling
trap 'echo -e "${RED}❌ Installation failed${NC}"; exit 1' ERR

echo -e "${GREEN}🚀 Installing dotfiles with chezmoi...${NC}"

# Detect OS
if [[ "$OSTYPE" == "darwin"* ]]; then
    OS="macos"
    PKG_MANAGER="brew"
else
    OS="linux"
    PKG_MANAGER="apt"
fi

echo -e "${YELLOW}📋 Detected OS: $OS${NC}"

# Ensure ~/.local/bin is in PATH
if [[ ":$PATH:" != *":$HOME/.local/bin:"* ]]; then
    export PATH="$HOME/.local/bin:$PATH"
fi

# Install package manager if needed
if [[ "$OS" == "macos" ]]; then
    if ! command -v brew >/dev/null 2>&1; then
        echo -e "${YELLOW}📦 Installing Homebrew...${NC}"
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        if [[ -f /opt/homebrew/bin/brew ]]; then
            eval "$(/opt/homebrew/bin/brew shellenv)"
        elif [[ -f /usr/local/bin/brew ]]; then
            eval "$(/usr/local/bin/brew shellenv)"
        fi
    fi
fi

# Install system packages
echo -e "${YELLOW}📦 Installing system packages...${NC}"
if [[ "$OS" == "macos" ]]; then
    # Check and install packages only if not already installed
    for pkg in stow jq ranger; do
        if ! brew list "$pkg" >/dev/null 2>&1; then
            brew install "$pkg"
        else
            echo -e "${GREEN}✅ $pkg already installed${NC}"
        fi
    done
else
    sudo apt update
    for pkg in stow jq ranger; do
        sudo apt install -y "$pkg" || echo "⚠️ Failed to install $pkg"
    done
fi

# Install applications
echo -e "${YELLOW}🐱 Installing kitty...${NC}"
if ! command -v kitty >/dev/null 2>&1; then
    if [[ "$OS" == "macos" ]]; then
        brew install --cask kitty
    else
        curl -L https://sw.kovidgoyal.net/kitty/installer.sh | sh /dev/stdin
        mkdir -p ~/.local/bin ~/.local/share/applications
        ln -sf ~/.local/kitty.app/bin/kitty ~/.local/bin/
        ln -sf ~/.local/kitty.app/bin/kitten ~/.local/bin/
        cp ~/.local/kitty.app/share/applications/kitty.desktop ~/.local/share/applications/ 2>/dev/null || true
        cp ~/.local/kitty.app/share/applications/kitty-open.desktop ~/.local/share/applications/ 2>/dev/null || true
        if [[ -f ~/.local/share/applications/kitty.desktop ]]; then
            sed -i "s|Icon=kitty|Icon=$HOME/.local/kitty.app/share/icons/hicolor/256x256/apps/kitty.png|g" ~/.local/share/applications/kitty*.desktop
            sed -i "s|Exec=kitty|Exec=$HOME/.local/kitty.app/bin/kitty|g" ~/.local/share/applications/kitty*.desktop
        fi
    fi
fi

echo -e "${YELLOW}📦 Installing Node.js...${NC}"
if ! command -v node >/dev/null 2>&1; then
    if [[ "$OS" == "macos" ]]; then
        if ! brew list node >/dev/null 2>&1; then
            brew install node
        else
            echo -e "${GREEN}✅ Node.js already installed${NC}"
        fi
    else
        sudo apt-get install -y ca-certificates curl gnupg
        sudo mkdir -p /etc/apt/keyrings
        curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | sudo gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg
        NODE_MAJOR=20
        echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_MAJOR.x nodistro main" | sudo tee /etc/apt/sources.list.d/nodesource.list
        sudo apt-get update
        sudo apt-get install -y nodejs
    fi
else
    echo -e "${GREEN}✅ Node.js already installed${NC}"
fi

echo -e "${YELLOW}📝 Installing Neovim...${NC}"
if ! command -v nvim >/dev/null 2>&1; then
    if [[ "$OS" == "macos" ]]; then
        if ! brew list neovim >/dev/null 2>&1; then
            brew install neovim
        else
            echo -e "${GREEN}✅ Neovim already installed${NC}"
        fi
    else
        if command -v apt >/dev/null 2>&1; then
            sudo apt install -y neovim 2>/dev/null || {
                echo -e "${YELLOW}  Package manager neovim not available, using appimage...${NC}"
                curl -LO https://github.com/neovim/neovim/releases/latest/download/nvim.appimage
                chmod u+x nvim.appimage
                mkdir -p ~/.local/bin
                mv nvim.appimage ~/.local/bin/nvim
            }
        else
            curl -LO https://github.com/neovim/neovim/releases/latest/download/nvim.appimage
            chmod u+x nvim.appimage
            mkdir -p ~/.local/bin
            mv nvim.appimage ~/.local/bin/nvim
        fi
    fi
else
    echo -e "${GREEN}✅ Neovim already installed${NC}"
fi

# Install Python dependencies for Neovim
echo -e "${YELLOW}🐍 Installing Python dependencies...${NC}"
if command -v python3 >/dev/null 2>&1; then
    # Check if pynvim is already available
    if python3 -c "import pynvim" 2>/dev/null; then
        echo -e "${GREEN}✅ pynvim already available${NC}"
    else
        # Try different installation methods
        if [[ "$OS" == "macos" ]]; then
            # On macOS, try to install via Homebrew first
            if command -v brew >/dev/null 2>&1; then
                echo -e "${YELLOW}  Trying to install pynvim via Homebrew...${NC}"
                brew install python-pynvim 2>/dev/null || {
                    echo -e "${YELLOW}  Homebrew pynvim not available, trying pip with --break-system-packages...${NC}"
                    pip3 install --break-system-packages pynvim 2>/dev/null || {
                        echo -e "${YELLOW}  Creating virtual environment for pynvim...${NC}"
                        python3 -m venv ~/.local/venv/pynvim
                        ~/.local/venv/pynvim/bin/pip install pynvim
                        echo -e "${YELLOW}  pynvim installed in virtual environment at ~/.local/venv/pynvim${NC}"
                    }
                }
            fi
        else
            # On Linux, try --user first, then --break-system-packages
            pip3 install --user pynvim 2>/dev/null || {
                echo -e "${YELLOW}  Trying with --break-system-packages...${NC}"
                pip3 install --break-system-packages pynvim 2>/dev/null || {
                    echo -e "${YELLOW}  Creating virtual environment for pynvim...${NC}"
                    python3 -m venv ~/.local/venv/pynvim
                    ~/.local/venv/pynvim/bin/pip install pynvim
                    echo -e "${YELLOW}  pynvim installed in virtual environment at ~/.local/venv/pynvim${NC}"
                }
            }
        fi
    fi
fi

echo -e "${GREEN}✅ Installation complete!${NC}"
echo -e "${GREEN}💡 Next steps:${NC}"
echo -e "  1. Restart your terminal"
echo -e "  2. Enjoy your new setup!"
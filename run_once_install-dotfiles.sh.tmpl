#!/bin/bash
# Install dotfiles and dependencies
# This script runs once during chezmoi apply

set -euo pipefail

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Error handling
trap 'echo -e "${RED}❌ Installation failed${NC}"; exit 1' ERR

echo -e "${GREEN}🚀 Installing dotfiles with chezmoi...${NC}"

# Detect OS
if [[ "$OSTYPE" == "darwin"* ]]; then
    OS="macos"
    PKG_MANAGER="brew"
else
    OS="linux"
    PKG_MANAGER="apt"
fi

echo -e "${YELLOW}📋 Detected OS: $OS${NC}"

# Ensure ~/.local/bin is in PATH
if [[ ":$PATH:" != *":$HOME/.local/bin:"* ]]; then
    export PATH="$HOME/.local/bin:$PATH"
fi

# Install package manager if needed
if [[ "$OS" == "macos" ]]; then
    if ! command -v brew >/dev/null 2>&1; then
        echo -e "${YELLOW}📦 Installing Homebrew...${NC}"
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        # Add Homebrew to PATH for this session
        eval "$(/opt/homebrew/bin/brew shellenv)" 2>/dev/null || eval "$(/usr/local/bin/brew shellenv)" 2>/dev/null || true
    fi
fi

# Install system packages
echo -e "${YELLOW}📦 Installing system packages...${NC}"
if [[ "$OS" == "macos" ]]; then
    brew install stow jq ranger
else
    sudo apt update
    sudo apt install -y stow jq ranger
fi

# Install applications
echo -e "${YELLOW}🐱 Installing kitty...${NC}"
if ! command -v kitty >/dev/null 2>&1; then
    if [[ "$OS" == "macos" ]]; then
        brew install --cask kitty
    else
        # Linux: Use package manager first, fallback to installer
        if command -v apt >/dev/null 2>&1; then
            sudo apt install -y kitty
        else
            curl -L https://sw.kovidgoyal.net/kitty/installer.sh | sh /dev/stdin
            # Create necessary directories
            mkdir -p ~/.local/bin ~/.local/share/applications
            # Create symlinks
            ln -sf ~/.local/kitty.app/bin/kitty ~/.local/bin/
            ln -sf ~/.local/kitty.app/bin/kitten ~/.local/bin/
            # Copy desktop files
            cp ~/.local/kitty.app/share/applications/kitty.desktop ~/.local/share/applications/ 2>/dev/null || true
            cp ~/.local/kitty.app/share/applications/kitty-open.desktop ~/.local/share/applications/ 2>/dev/null || true
            # Update desktop files if they exist
            if [[ -f ~/.local/share/applications/kitty.desktop ]]; then
                sed -i "s|Icon=kitty|Icon=$HOME/.local/kitty.app/share/icons/hicolor/256x256/apps/kitty.png|g" ~/.local/share/applications/kitty*.desktop
                sed -i "s|Exec=kitty|Exec=$HOME/.local/kitty.app/bin/kitty|g" ~/.local/share/applications/kitty*.desktop
            fi
        fi
    fi
fi

echo -e "${YELLOW}📦 Installing Node.js...${NC}"
if ! command -v node >/dev/null 2>&1; then
    if [[ "$OS" == "macos" ]]; then
        brew install node
    else
        # Linux: Use NodeSource repository
        sudo apt-get install -y ca-certificates curl gnupg
        sudo mkdir -p /etc/apt/keyrings
        curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | sudo gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg
        NODE_MAJOR=20  # Default to Node.js 20
        echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_MAJOR.x nodistro main" | sudo tee /etc/apt/sources.list.d/nodesource.list
        sudo apt-get update
        sudo apt-get install nodejs -y
    fi
fi

echo -e "${YELLOW}📝 Installing Neovim...${NC}"
if ! command -v nvim >/dev/null 2>&1; then
    if [[ "$OS" == "macos" ]]; then
        brew install neovim
    else
        # Linux: Try package manager first, then appimage
        if command -v apt >/dev/null 2>&1; then
            # Try to install from package manager
            sudo apt install -y neovim 2>/dev/null || {
                echo -e "${YELLOW}  Package manager neovim not available, using appimage...${NC}"
                curl -LO https://github.com/neovim/neovim/releases/latest/download/nvim.appimage
                chmod u+x nvim.appimage
                # Create directory and move appimage
                mkdir -p ~/.local/bin
                mv nvim.appimage ~/.local/bin/nvim
            }
        else
            # Fallback for non-apt systems
            curl -LO https://github.com/neovim/neovim/releases/latest/download/nvim.appimage
            chmod u+x nvim.appimage
            mkdir -p ~/.local/bin
            mv nvim.appimage ~/.local/bin/nvim
        fi
    fi
fi

# Install Python dependencies for Neovim
echo -e "${YELLOW}🐍 Installing Python dependencies...${NC}"
if command -v pip3 >/dev/null 2>&1; then
    pip3 install pynvim
elif command -v pip >/dev/null 2>&1; then
    pip install pynvim
fi

echo -e "${GREEN}✅ Installation complete!${NC}"
echo -e "${GREEN}💡 Next steps:${NC}"
echo -e "  1. Run: chezmoi apply"
echo -e "  2. Restart your terminal"
echo -e "  3. Enjoy your new setup!" 